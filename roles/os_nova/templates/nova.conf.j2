[DEFAULT]
dhcpbridge_flagfile=/etc/nova/nova.conf
dhcpbridge=/usr/bin/nova-dhcpbridge
logdir=/var/log/nova
state_path=/var/lib/nova
lock_path=/var/lock/nova
force_dhcp_release=True
libvirt_use_virtio_for_bridges=True
verbose=True
ec2_private_dns_show_ip=True
multi_instance_display_name_template = %(name)s-%(count)d
api_paste_config=/etc/nova/api-paste.ini
enabled_apis=osapi_compute,metadata
{% set nova_enabled_ssl_apis = [] %}
{% if nova_api_uri_proto == "https" %}
{% set nova_enabled_ssl_apis = nova_enabled_ssl_apis + ["osapi_compute"] %}
{% endif %}
{% if nova_metadata_uri_proto == "https" %}
{% set nova_enabled_ssl_apis = nova_enabled_ssl_apis + ["metadata"] %}
{% endif %}
{% if (nova_api_uri_proto == "https" or nova_metadata_uri_proto == "https") and inventory_hostname in groups['nova_api'] %}
enabled_ssl_apis ={% for ssl_api in nova_enabled_ssl_apis %} {{ ssl_api }}{% if not loop.last %},{% endif %}{% endfor %}

ssl_key_file = "{{ nova_ssl_key }}"
ssl_cert_file = "{{ nova_ssl_cert }}"
{% endif %}
rpc_backend = rabbit
auth_strategy = keystone
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver
osapi_compute_listen = {{ nova_api_bind_host }}
osapi_compute_listen_port = {{ nova_api_bind_port }}
metadata_listen = {{ nova_metadata_bind_host }}
metadata_listen_port = {{ nova_metadata_bind_port }}
my_ip = {{ ansible_host }}
{% if inventory_hostname in groups['nova_api'] %}
[api_database]
connection = mysql+pymysql://{{ nova_database_user }}:{{ nova_database_password }}@{{ mysql_server_address }}/{{ nova_api_database_name }}

[database]
connection = mysql+pymysql://{{ nova_database_user }}:{{ nova_database_password }}@{{ mysql_server_address }}/{{ nova_database_name }}
{% endif %}

[oslo_messaging_rabbit]
rabbit_host = {{ rabbitmq_server }}
rabbit_userid = {{ rabbitmq_auth_user }}
rabbit_password = {{ rabbitmq_auth_password }}

[keystone_authtoken]
auth_uri = {{ keystone_service_adminuri }}
auth_url = {{ keystone_service_internaluri }}
memcached_servers = {{ memcached_servers }}
auth_type = password
project_domain_name = {{ nova_service_project_domain }}
user_domain_name = {{ nova_service_user_domain }}
project_name = {{ nova_service_project }}
username = {{ nova_service_user }}
password = {{ nova_service_password }}
insecure = {{ keystone_ssl_insecure }}
region_name = {{ keystone_service_region }}

[cinder]
os_region_name = {{ cinder_service_region }}
insecure = {{ cinder_ssl_insecure }}

[vnc]
vncserver_listen = $my_ip
vncserver_proxyclient_address = $my_ip
{% if inventory_hostname in groups['nova_compute'] %}
novncproxy_base_url = http://controller:6080/vnc_auto.html
{% endif %}

[glance]
api_servers = {{ glance_service_url }}
api_insecure = {{ glance_ssl_insecure | bool }}

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

{% if nova_use_neutron_networking %}
[neutron]
insecure = {{ neutron_ssl_insecure }}
url = {{ neutron_service_adminuri }}
auth_url = {{ keystone_service_adminuri }}
auth_type = password
project_domain_name = {{ neutron_service_project_domain }}
user_domain_name = {{ neutron_service_user_domain }}
region_name = {{ neutron_service_region }}
project_name = {{ neutron_service_project }}
username = {{ neutron_service_user }}
password = {{ neutron_service_password }}
{% if inventory_hostname in groups['nova_api'] %}
service_metadata_proxy = True
metadata_proxy_shared_secret = {{ network_metadata_secret }}
{% endif %}
{% endif %}
